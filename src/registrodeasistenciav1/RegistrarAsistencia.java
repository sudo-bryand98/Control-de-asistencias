
package registrodeasistenciav1;

import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class RegistrarAsistencia extends javax.swing.JFrame implements Runnable{
    String hora, ampm, fecha,horac;
    Calendar calendario;
    Thread h1;
    Connection connection;
    PreparedStatement preparedStatement;
    ResultSet resultSet;
    conexion con=new conexion();
    Connection reg=con.conexion();

    /**
     * Creates new form RegistrarAsistencia
     */
    public RegistrarAsistencia() {
        initComponents();
        this.setLocationRelativeTo(null);
        h1 = new Thread(this);
        h1.start();
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("NUM. REGISTRO");
        modelo.addColumn("NOMBRE");
        modelo.addColumn("Hora de entrada ");
        modelo.addColumn("Hora de salida");
        modelo.addColumn("fecha");
       

       tabla_asistencoias.setModel(modelo);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtusuario = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        pscontraseña = new javax.swing.JPasswordField();
        btnRegistrar = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        labelReloj = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_asistencoias = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        itmregistro = new javax.swing.JComboBox<>();
        lbFecha = new javax.swing.JLabel();
        btnpaneladmin = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SISTEMA DE GESTIÓN DE ASISTENCIA");
        setIconImage( new ImageIcon(getClass().getResource("/Img/employees.png")).getImage());

        jPanel1.setBackground(new java.awt.Color(240, 239, 239));

        jPanel2.setBackground(new java.awt.Color(51, 51, 255));

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("REGISTRAR ASISTENCIA");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        txtusuario.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        txtusuario.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));

        jLabel4.setBackground(new java.awt.Color(0, 153, 153));
        jLabel4.setFont(new java.awt.Font("Yu Gothic UI", 1, 20)); // NOI18N
        jLabel4.setText("USUARIO:");

        pscontraseña.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        pscontraseña.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));

        btnRegistrar.setBackground(new java.awt.Color(153, 255, 153));
        btnRegistrar.setFont(new java.awt.Font("Yu Gothic UI", 1, 12)); // NOI18N
        btnRegistrar.setText("REGISTAR");
        btnRegistrar.setFocusable(false);
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(153, 204, 255));
        jButton2.setFont(new java.awt.Font("Yu Gothic UI", 1, 12)); // NOI18N
        jButton2.setText("NUEVO");
        jButton2.setFocusable(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setBackground(new java.awt.Color(0, 153, 153));
        jLabel5.setFont(new java.awt.Font("Yu Gothic UI", 1, 20)); // NOI18N
        jLabel5.setText("CONTRASEÑA");

        labelReloj.setBackground(new java.awt.Color(102, 0, 0));
        labelReloj.setFont(new java.awt.Font("Yu Gothic UI", 1, 48)); // NOI18N
        labelReloj.setForeground(new java.awt.Color(51, 51, 255));
        labelReloj.setText("10:30 ");

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 255)), "VERIFIQUE QUE SUS DATOS SEAN CORRECTOS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Yu Gothic", 1, 12), new java.awt.Color(51, 51, 255))); // NOI18N

        tabla_asistencoias = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex){
                return false;
            }
        };
        tabla_asistencoias.setBackground(new java.awt.Color(204, 255, 255));
        tabla_asistencoias.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        tabla_asistencoias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabla_asistencoias.setEnabled(false);
        tabla_asistencoias.setRowHeight(30);
        tabla_asistencoias.setSelectionBackground(new java.awt.Color(102, 153, 255));
        jScrollPane1.setViewportView(tabla_asistencoias);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 631, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel7.setBackground(new java.awt.Color(0, 153, 153));
        jLabel7.setFont(new java.awt.Font("Yu Gothic UI", 1, 20)); // NOI18N
        jLabel7.setText("REGISTRO MI:");

        itmregistro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECCIONE UNO", "ENTRADA", "SALIDA" }));
        itmregistro.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                itmregistroItemStateChanged(evt);
            }
        });

        lbFecha.setBackground(new java.awt.Color(102, 0, 0));
        lbFecha.setFont(new java.awt.Font("Yu Gothic UI", 1, 36)); // NOI18N
        lbFecha.setForeground(new java.awt.Color(51, 51, 255));
        lbFecha.setText("jLabel2");

        btnpaneladmin.setBackground(new java.awt.Color(204, 255, 255));
        btnpaneladmin.setFont(new java.awt.Font("Yu Gothic UI", 1, 12)); // NOI18N
        btnpaneladmin.setText("PANEL ADMINISTRATIVO");
        btnpaneladmin.setFocusable(false);
        btnpaneladmin.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnpaneladmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnpaneladminActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(pscontraseña, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addGap(3, 3, 3)
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtusuario, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(itmregistro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(189, 189, 189))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(labelReloj)
                                .addComponent(lbFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnpaneladmin)
                        .addGap(10, 10, 10)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelReloj)
                    .addComponent(btnpaneladmin))
                .addGap(18, 18, 18)
                .addComponent(lbFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtusuario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pscontraseña, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(itmregistro, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(btnRegistrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
     
        if(txtusuario.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Favor de ingresar un usuario", "ADVERTENCIA", JOptionPane.WARNING_MESSAGE);
            txtusuario.requestFocus();
        }
        else if(pscontraseña.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Favor de ingresar su contraseña", "ADVERTENCIA", JOptionPane.WARNING_MESSAGE);
            pscontraseña.requestFocus();
        }
        else if(itmregistro.getSelectedItem().equals("SELECCIONE UNO")){
            JOptionPane.showMessageDialog(null, "Favor de seleccionar una opción INGRESO O SALIDA de su turno", "ADVERTENCIA", JOptionPane.WARNING_MESSAGE);
            itmregistro.requestFocus();
        }
        
        else{
            if(itmregistro.getSelectedItem().equals("ENTRADA")){
                registrarEntrada();            
            }
            if(itmregistro.getSelectedItem().equals("SALIDA")){
                registrarSalida(); 
            }
        }            
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
           limpiartodo();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void limpiartodo(){ // METODO PARA LIMPIAR TODOS LOS CAMPOS DE TEXTO, TABLA Y REINICIAR EL COMBOBOX
        llenartabla(" ", " ", " ");
        txtusuario.setText("");
        pscontraseña.setText("");
        itmregistro.setSelectedItem("SELECCIONE UNO");
        txtusuario.requestFocus();
    }
    
    private void itmregistroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_itmregistroItemStateChanged
        
        if(itmregistro.getSelectedItem().equals("ENTRADA")){
            llenartabla(txtusuario.getText(), pscontraseña.getText(), "1");
        
        }
         if(itmregistro.getSelectedItem().equals("SALIDA")){
            llenartabla(txtusuario.getText(), pscontraseña.getText(), "2");
        
        }
        
    }//GEN-LAST:event_itmregistroItemStateChanged

    private void btnpaneladminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnpaneladminActionPerformed
        LogIn li = new LogIn();
        li.setVisible(true);
    }//GEN-LAST:event_btnpaneladminActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistrarAsistencia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistrarAsistencia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistrarAsistencia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistrarAsistencia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegistrarAsistencia().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JButton btnpaneladmin;
    private javax.swing.JComboBox<String> itmregistro;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelReloj;
    private javax.swing.JLabel lbFecha;
    private javax.swing.JPasswordField pscontraseña;
    private javax.swing.JTable tabla_asistencoias;
    private javax.swing.JTextField txtusuario;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        Thread ct = Thread.currentThread();
        
        while (ct == h1) {
            calcula();
            labelReloj.setText(hora+ " " +ampm);
            horac=hora;
            lbFecha.setText(fecha);
            try {
                Thread.sleep(100);
            } catch (Exception e) {
            }
            
        }
    }

    private void calcula() {
        Calendar calendario = new GregorianCalendar();
        Date fechahora= new Date();
        SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
         SimpleDateFormat forhora = new SimpleDateFormat("hh:mm:ss");
        calendario.setTime(fechahora);
        ampm = calendario.get(Calendar.AM_PM)== Calendar.AM?"AM":"PM";
        fecha= formato.format(fechahora);
        
        
        hora= forhora.format(fechahora) ;
       
    }
        void llenartabla(String usuario, String contrase,String es){
            DefaultTableModel modelo = new DefaultTableModel();
            modelo.addColumn("NUM. REGISTRO");
            modelo.addColumn("NOMBRE");
            modelo.addColumn("Hora de entrada ");
            modelo.addColumn("Hora de salida");
            modelo.addColumn("fecha");


           tabla_asistencoias.setModel(modelo);
            String sql = "";
                sql = "SELECT * FROM `usuarios` WHERE `usuario` LIKE '"+usuario+"' AND `contrasenia` LIKE '"+contrase+"'";

            String[] datos = new String[8];
            try {
                Statement st = reg.createStatement();
                ResultSet rs = st.executeQuery(sql);



                while (rs.next()) {
                    datos[0] = rs.getString(1);
                    datos[1] = rs.getString(2);
                    datos[2] = hora ;
                    if(es.equals("2")){   
                    datos[3] = hora;
                    }else{
                    datos[3] = "hora sin registrar";
                    }
                    datos[4] = fecha;         

                    modelo.addRow(datos);
                }
                tabla_asistencoias.setModel(modelo);
              /*if(datos[0]==null){
                     JOptionPane.showMessageDialog(null, "no existe ningun registro con ese usario y contraseña" );
                }*/

            } catch (SQLException ex) {
                Logger.getLogger(GestiondeUsuarios.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        void registrarEntrada(){ //METODO QUE SE INVOCARA AL HACER CLICK EN EL BOTON REGISTRAR DE LA GUI
            // VALIDAR SI USUARIO YA REGISTRO UNA ENTRADA EN EL DIA - NO ES POSIBLE REGISTRAR 2 ENTRADA CON EL MISMO USUARIO EN UN SOLO DIA
            String consulta = "";
            consulta = "SELECT * FROM asistencias.asistencia where h_entrada is not null and id_usuario = ? and fecha = curdate()"; //QUERY QUE PERMITE VERIFICAR EN LA BD SI LA COLUMNA H_ENTRADA NO ESTA VACIA CON EL ID DEL USUARIO
            try {
               PreparedStatement pstm=reg.prepareCall(consulta);
               pstm.setString(1,String.valueOf(tabla_asistencoias.getValueAt(0, 0)));
               ResultSet rs = pstm.executeQuery();
                if(rs.next()){
                    JOptionPane.showMessageDialog(null, "El usuario ya ha registrado una entrada el día de hoy en la base de datos, no es posible registrar otra en el día");
                    limpiartodo(); // METODO QUE LIMPIA LOS TEXTFIELD Y LA TABLA
                    txtusuario.requestFocus();
                }
               else{ // SI NO HAY UN REGISTRO DE ENTRADA PREVIO EN EL DIA CON EL USUARIO EN CONSULTA, SE PROCEDE A REGISTRAR LA ASISTENCIA
                        String sql="INSERT INTO `asistencia` ( `h_entrada`, `h_salida`, `fecha`, `id_usuario`) VALUES (?, ?, ?, ?)" ; // QUERY PARA REGISTRAR ENTRADA EN LA BD
                        try{      
                            PreparedStatement pst=reg.prepareCall(sql);  
                            pst.setString(1,String.valueOf(tabla_asistencoias.getValueAt(0, 2)));
                            pst.setString(2,String.valueOf(tabla_asistencoias.getValueAt(0, 3)));
                            pst.setString(3,String.valueOf(tabla_asistencoias.getValueAt(0, 4)));
                            pst.setString(4,String.valueOf(tabla_asistencoias.getValueAt(0, 0)));

                            int n= pst.executeUpdate();
                            //tabla("");

                            if(n>0){           
                                JOptionPane.showMessageDialog(null,"Entrada Registrada correctamentre");
                            }
                            else{
                                JOptionPane.showMessageDialog(null,"Error al registrar entrada" );
                            }
                        } catch (SQLException ex) {
                            Logger.getLogger(RegistrarUsuario.class.getName()).log(Level.SEVERE, null, ex);
                           } 
                    }
            } catch (Exception e) {
                Logger.getLogger(RegistrarUsuario.class.getName()).log(Level.SEVERE, null, e);
            }
            
        } // FIN DE METODO PARA REGISTRAR ENTRADA DE USUARIO POR UNICA VEZ EN EL DIA
         void registrarSalida(){
                
                String query = "";
                query = "SELECT * FROM asistencias.asistencia where h_salida = 'hora sin registrar' and id_usuario = ? and fecha = curdate()";
                try {
                        PreparedStatement pstmt=reg.prepareCall(query);
                        pstmt.setString(1,String.valueOf(tabla_asistencoias.getValueAt(0, 0)));
                        ResultSet rst = pstmt.executeQuery();
                         if(rst.next()){
                             try {
                                    preparedStatement = reg.prepareStatement("UPDATE `asistencia` SET `h_salida` = ? WHERE `asistencia`.id_usuario= ? AND `asistencia`.`fecha` = ?");
                                    preparedStatement.setString(1, String.valueOf(tabla_asistencoias.getValueAt(0, 3)));
                                    preparedStatement.setInt(2, Integer.parseInt(String.valueOf(tabla_asistencoias.getValueAt(0, 0))));
                                    preparedStatement.setString(3, String.valueOf(tabla_asistencoias.getValueAt(0, 4)));
                                    int res = preparedStatement.executeUpdate();

                                        if (res > 0) {
                                            JOptionPane.showMessageDialog(null, "Salida registrada correctamente");

                                        } else {
                                            JOptionPane.showMessageDialog(null, "Error al registrar salida, no hay registro de hora de entrada con este usuario el día de hoy en la base de datos");
                                            limpiartodo();
                                        }

                                } catch (SQLException | NumberFormatException | HeadlessException ex) {
                                    System.out.println(ex);
                                }                             
                         }
                         else{
                             JOptionPane.showMessageDialog(null, "Este usuario ya ha registrado una salida el día de hoy en la base de datos, no es posible registrar otra en el día");
                             limpiartodo(); // METODO QUE LIMPIA LOS TEXTFIELD Y LA TABLA
                             txtusuario.requestFocus();
                         }
             } catch (Exception e) {
                 Logger.getLogger(RegistrarUsuario.class.getName()).log(Level.SEVERE, null, e);
             }
                   
        }
}
